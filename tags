!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
ALIGNMENT	workload_generator.h	/^    ALIGNMENT,		    \/\/ 14$/;"	e	enum:WG_PARAMETER_NUM
ALIGNMENT_UNIT	workload_generator.h	/^    ALIGNMENT_UNIT,		    \/\/ 15$/;"	e	enum:WG_PARAMETER_NUM
BUF_SIZE	WLGenerator.h	1;"	d
BURSTINESS_NUMBER	workload_generator.h	/^    BURSTINESS_NUMBER,	    \/\/ 12$/;"	e	enum:WG_PARAMETER_NUM
DEBUG_MODE	WLGenerator.h	4;"	d
DEBUG_MODE	workload_generator.h	8;"	d
DIR_READ	WLGenerator.h	/^    DIR_READ=0,$/;"	e	enum:__anon1
DIR_WRITE	WLGenerator.h	/^    DIR_WRITE$/;"	e	enum:__anon1
FILE_PATH	workload_generator.h	/^    FILE_PATH,$/;"	e	enum:WG_PARAMETER_STR
IO_DIR	WLGenerator.h	/^}IO_DIR;$/;"	t	typeref:enum:__anon1
IO_SIGNAL	WLGenerator.h	7;"	d
MAX_ADDR	workload_generator.h	/^    MAX_ADDR,		    \/\/ 4$/;"	e	enum:WG_PARAMETER_NUM
MAX_FILE_SIZE	WLGenerator.h	6;"	d
MAX_SIZE	workload_generator.h	/^    MAX_SIZE,		    \/\/ 6$/;"	e	enum:WG_PARAMETER_NUM
MIN_ADDR	workload_generator.h	/^    MIN_ADDR,		    \/\/ 5$/;"	e	enum:WG_PARAMETER_NUM
MIN_SIZE	workload_generator.h	/^    MIN_SIZE,		    \/\/ 7$/;"	e	enum:WG_PARAMETER_NUM
NONSEQUENTIAL_W	workload_generator.h	/^    NONSEQUENTIAL_W,	    \/\/ 9$/;"	e	enum:WG_PARAMETER_NUM
NUM_OPERATION_TYPE	workload_generator.h	/^    NUM_OPERATION_TYPE		    \/\/ 2$/;"	e	enum:OPERATION_TYPE
NUM_TEST_LENGHTH_TYPE	workload_generator.h	/^	NUM_TEST_LENGHTH_TYPE	    \/\/ 2$/;"	e	enum:TEST_LENGTH_TYPE
NUM_TEST_LENGTH_TYPE	workload_generator.h	/^    NUM_TEST_LENGTH_TYPE	    \/\/ 2$/;"	e	enum:TEST_INTERFACE_TYPE
NUM_WG_PARAMETER_NUM	workload_generator.h	/^    NUM_WG_PARAMETER_NUM,	    \/\/ 16$/;"	e	enum:WG_PARAMETER_NUM
NUM_WG_PARAMETER_STR	workload_generator.h	/^    NUM_WG_PARAMETER_STR,	    $/;"	e	enum:WG_PARAMETER_STR
OPERATION_TYPE	workload_generator.h	/^enum OPERATION_TYPE {$/;"	g
POSE_TIME	workload_generator.h	/^    POSE_TIME,		    \/\/ 13$/;"	e	enum:WG_PARAMETER_NUM
PRINT	workload_generator.h	11;"	d
PRINT	workload_generator.h	14;"	d
PWG_ENV	workload_generator.h	/^} WG_ENV, *PWG_ENV;$/;"	t	typeref:struct:_wg_env
RANDOM_DETERMINISTIC	workload_generator.h	/^    RANDOM_DETERMINISTIC,$/;"	e	enum:WG_PARAMETER_NUM
READ_W	workload_generator.h	/^    READ_W,			    \/\/ 10$/;"	e	enum:WG_PARAMETER_NUM
SECTOR_SIZE	WLGenerator.h	2;"	d
SEQUENTIAL_W	workload_generator.h	/^    SEQUENTIAL_W,		    \/\/ 8$/;"	e	enum:WG_PARAMETER_NUM
SIZE_OF_SECTOR	workload_generator.h	18;"	d
TEST_INTERFACE_TYPE	workload_generator.h	/^    TEST_INTERFACE_TYPE,	    \/\/ 0$/;"	e	enum:WG_PARAMETER_NUM
TEST_INTERFACE_TYPE	workload_generator.h	/^enum TEST_INTERFACE_TYPE{$/;"	g
TEST_LENGTH_TYPE	workload_generator.h	/^    TEST_LENGTH_TYPE,	    \/\/ 1$/;"	e	enum:WG_PARAMETER_NUM
TEST_LENGTH_TYPE	workload_generator.h	/^enum TEST_LENGTH_TYPE {$/;"	g
TIME_VALUE	workload_generator.h	20;"	d
TOTAL_TEST_REQUESTS	workload_generator.h	/^    TOTAL_TEST_REQUESTS,	    \/\/ 2$/;"	e	enum:WG_PARAMETER_NUM
TOTAL_TEST_TIME	workload_generator.h	/^    TOTAL_TEST_TIME,	    \/\/ 3$/;"	e	enum:WG_PARAMETER_NUM
WG_BLKDEV	workload_generator.h	/^    WG_BLKDEV,			    \/\/ 1$/;"	e	enum:TEST_INTERFACE_TYPE
WG_CHARDEV	workload_generator.h	/^    WG_CHARDEV,			    \/\/ 0$/;"	e	enum:TEST_INTERFACE_TYPE
WG_ENV	workload_generator.h	/^} WG_ENV, *PWG_ENV;$/;"	t	typeref:struct:_wg_env
WG_NUMBER	workload_generator.h	/^	WG_NUMBER,		    \/\/ 1$/;"	e	enum:TEST_LENGTH_TYPE
WG_PARAMETER_NUM	workload_generator.h	/^enum WG_PARAMETER_NUM { $/;"	g
WG_PARAMETER_STR	workload_generator.h	/^enum WG_PARAMETER_STR { $/;"	g
WG_READ	workload_generator.h	/^    WG_READ,			    \/\/ 0$/;"	e	enum:OPERATION_TYPE
WG_STR_LENGTH	workload_generator.h	17;"	d
WG_TIME	workload_generator.h	/^	WG_TIME,		    \/\/ 0$/;"	e	enum:TEST_LENGTH_TYPE
WG_WRITE	workload_generator.h	/^    WG_WRITE,			    \/\/ 1$/;"	e	enum:OPERATION_TYPE
WRITE_W	workload_generator.h	/^    WRITE_W,		    \/\/ 11$/;"	e	enum:WG_PARAMETER_NUM
_GNU_SOURCE	WLGenerator.c	1;"	d	file:
_GNU_SOURCE	workload_generator.c	5;"	d	file:
__WORKLOAD_GENERATOR_H__	workload_generator.h	2;"	d
_wg_env	workload_generator.h	/^typedef struct _wg_env {$/;"	s
_wg_env::alignment	workload_generator.h	/^    unsigned int alignment;$/;"	m	struct:_wg_env	access:public
_wg_env::alignment_unit	workload_generator.h	/^    unsigned int alignment_unit;$/;"	m	struct:_wg_env	access:public
_wg_env::burstiness_number	workload_generator.h	/^    unsigned int burstiness_number;$/;"	m	struct:_wg_env	access:public
_wg_env::file_path	workload_generator.h	/^    char *file_path;$/;"	m	struct:_wg_env	access:public
_wg_env::max_addr	workload_generator.h	/^    unsigned long max_addr;$/;"	m	struct:_wg_env	access:public
_wg_env::max_size	workload_generator.h	/^    unsigned long max_size;$/;"	m	struct:_wg_env	access:public
_wg_env::min_addr	workload_generator.h	/^    unsigned long min_addr;$/;"	m	struct:_wg_env	access:public
_wg_env::min_size	workload_generator.h	/^    unsigned long min_size;$/;"	m	struct:_wg_env	access:public
_wg_env::nonsequential_w	workload_generator.h	/^    unsigned int nonsequential_w;$/;"	m	struct:_wg_env	access:public
_wg_env::pose_time	workload_generator.h	/^    unsigned int pose_time; \/\/ms$/;"	m	struct:_wg_env	access:public
_wg_env::rand_deterministic	workload_generator.h	/^    unsigned int rand_deterministic;$/;"	m	struct:_wg_env	access:public
_wg_env::read_w	workload_generator.h	/^    unsigned int read_w;$/;"	m	struct:_wg_env	access:public
_wg_env::sequential_w	workload_generator.h	/^    unsigned int sequential_w;$/;"	m	struct:_wg_env	access:public
_wg_env::test_interface_type	workload_generator.h	/^    unsigned int test_interface_type;$/;"	m	struct:_wg_env	access:public
_wg_env::test_length_type	workload_generator.h	/^    unsigned int test_length_type;$/;"	m	struct:_wg_env	access:public
_wg_env::total_test_req	workload_generator.h	/^    unsigned long total_test_req;$/;"	m	struct:_wg_env	access:public
_wg_env::total_test_time	workload_generator.h	/^    unsigned int total_test_time;$/;"	m	struct:_wg_env	access:public
_wg_env::write_w	workload_generator.h	/^    unsigned int write_w;$/;"	m	struct:_wg_env	access:public
alignment	workload_generator.h	/^    unsigned int alignment;$/;"	m	struct:_wg_env	access:public
alignment_unit	workload_generator.h	/^    unsigned int alignment_unit;$/;"	m	struct:_wg_env	access:public
burstiness_number	workload_generator.h	/^    unsigned int burstiness_number;$/;"	m	struct:_wg_env	access:public
f_alignment	workload_generator.c	/^void f_alignment(unsigned long in)$/;"	f	signature:(unsigned long in)
f_alignment	workload_generator.c	/^void f_alignment(unsigned long in);$/;"	p	file:	signature:(unsigned long in)
f_alignment_unit	workload_generator.c	/^void f_alignment_unit(unsigned long in)$/;"	f	signature:(unsigned long in)
f_alignment_unit	workload_generator.c	/^void f_alignment_unit(unsigned long in);$/;"	p	file:	signature:(unsigned long in)
f_burstiness_number	workload_generator.c	/^void f_burstiness_number(unsigned long in);$/;"	p	file:	signature:(unsigned long in)
f_burstiness_number	workload_generator.c	/^void f_burstiness_number(unsigned long in){$/;"	f	signature:(unsigned long in)
f_file_path	workload_generator.c	/^void f_file_path(char *in)$/;"	f	signature:(char *in)
f_file_path	workload_generator.c	/^void f_file_path(char *in);$/;"	p	file:	signature:(char *in)
f_max_addr	workload_generator.c	/^void f_max_addr(unsigned long in)$/;"	f	signature:(unsigned long in)
f_max_addr	workload_generator.c	/^void f_max_addr(unsigned long in);$/;"	p	file:	signature:(unsigned long in)
f_max_size	workload_generator.c	/^void f_max_size(unsigned long in)$/;"	f	signature:(unsigned long in)
f_max_size	workload_generator.c	/^void f_max_size(unsigned long in);$/;"	p	file:	signature:(unsigned long in)
f_min_addr	workload_generator.c	/^void f_min_addr(unsigned long in)$/;"	f	signature:(unsigned long in)
f_min_addr	workload_generator.c	/^void f_min_addr(unsigned long in);$/;"	p	file:	signature:(unsigned long in)
f_min_size	workload_generator.c	/^void f_min_size(unsigned long in)$/;"	f	signature:(unsigned long in)
f_min_size	workload_generator.c	/^void f_min_size(unsigned long in);$/;"	p	file:	signature:(unsigned long in)
f_nonsequential_w	workload_generator.c	/^void f_nonsequential_w(unsigned long in)$/;"	f	signature:(unsigned long in)
f_nonsequential_w	workload_generator.c	/^void f_nonsequential_w(unsigned long in);$/;"	p	file:	signature:(unsigned long in)
f_pose_time	workload_generator.c	/^void f_pose_time(unsigned long in)$/;"	f	signature:(unsigned long in)
f_pose_time	workload_generator.c	/^void f_pose_time(unsigned long in);$/;"	p	file:	signature:(unsigned long in)
f_random_deterministic	workload_generator.c	/^void f_random_deterministic(unsigned long in);$/;"	p	file:	signature:(unsigned long in)
f_random_deterministic	workload_generator.c	/^void f_random_deterministic(unsigned long in){$/;"	f	signature:(unsigned long in)
f_read_w	workload_generator.c	/^void f_read_w(unsigned long in)$/;"	f	signature:(unsigned long in)
f_read_w	workload_generator.c	/^void f_read_w(unsigned long in);$/;"	p	file:	signature:(unsigned long in)
f_sequential_w	workload_generator.c	/^void f_sequential_w(unsigned long in)$/;"	f	signature:(unsigned long in)
f_sequential_w	workload_generator.c	/^void f_sequential_w(unsigned long in);$/;"	p	file:	signature:(unsigned long in)
f_test_interface_type	workload_generator.c	/^void f_test_interface_type(unsigned long in)$/;"	f	signature:(unsigned long in)
f_test_interface_type	workload_generator.c	/^void f_test_interface_type(unsigned long in);$/;"	p	file:	signature:(unsigned long in)
f_test_length_type	workload_generator.c	/^void f_test_length_type(unsigned long in)$/;"	f	signature:(unsigned long in)
f_test_length_type	workload_generator.c	/^void f_test_length_type(unsigned long in);$/;"	p	file:	signature:(unsigned long in)
f_total_test_req	workload_generator.c	/^void f_total_test_req(unsigned long in)$/;"	f	signature:(unsigned long in)
f_total_test_req	workload_generator.c	/^void f_total_test_req(unsigned long in);$/;"	p	file:	signature:(unsigned long in)
f_total_test_time	workload_generator.c	/^void f_total_test_time(unsigned long in)$/;"	f	signature:(unsigned long in)
f_total_test_time	workload_generator.c	/^void f_total_test_time(unsigned long in);$/;"	p	file:	signature:(unsigned long in)
f_write_w	workload_generator.c	/^void f_write_w(unsigned long in)$/;"	f	signature:(unsigned long in)
f_write_w	workload_generator.c	/^void f_write_w(unsigned long in);$/;"	p	file:	signature:(unsigned long in)
file_path	workload_generator.h	/^    char *file_path;$/;"	m	struct:_wg_env	access:public
fill_buffer	WLGenerator.c	/^static void fill_buffer(char *buf, int size){$/;"	f	file:	signature:(char *buf, int size)
fill_data	workload_generator.c	/^void fill_data(char *buf, unsigned int size)$/;"	f	signature:(char *buf, unsigned int size)
fill_data	workload_generator.c	/^void fill_data(char *buf, unsigned int size);$/;"	p	file:	signature:(char *buf, unsigned int size)
get_rand_offset	WLGenerator.c	/^static int get_rand_offset(int align, int maxOffset, int unit){$/;"	f	file:	signature:(int align, int maxOffset, int unit)
get_rand_range	workload_generator.c	/^unsigned int get_rand_range(unsigned int min, unsigned int max)$/;"	f	signature:(unsigned int min, unsigned int max)
get_rand_range	workload_generator.c	/^unsigned int get_rand_range(unsigned int min, unsigned int max);$/;"	p	file:	signature:(unsigned int min, unsigned int max)
interface_unit	workload_generator.c	/^static unsigned long interface_unit = 1;$/;"	v	file:
io_completion_handler	WLGenerator.c	/^static void io_completion_handler(int sig, siginfo_t *si, void *ucontext){$/;"	f	file:	signature:(int sig, siginfo_t *si, void *ucontext)
io_enqueue	WLGenerator.c	/^static int io_enqueue(IO_DIR direction, struct aiocb *aiocbp){$/;"	f	file:	signature:(IO_DIR direction, struct aiocb *aiocbp)
io_initialize	WLGenerator.c	/^static void io_initialize(struct aiocb * aiocbp, int fd, $/;"	f	file:	signature:(struct aiocb * aiocbp, int fd, unsigned int buflen, int fileOffset, int reqID)
main	WLGenerator.c	/^void main(int argc, char *argv[]){$/;"	f	signature:(int argc, char *argv[])
main	workload_generator.c	/^void main(void)$/;"	f	signature:(void)
max_addr	workload_generator.h	/^    unsigned long max_addr;$/;"	m	struct:_wg_env	access:public
max_size	workload_generator.h	/^    unsigned long max_size;$/;"	m	struct:_wg_env	access:public
mem_allocation	WLGenerator.c	/^static int mem_allocation(char **buf, int reqSize, bool align){$/;"	f	file:	signature:(char **buf, int reqSize, bool align)
min_addr	workload_generator.h	/^    unsigned long min_addr;$/;"	m	struct:_wg_env	access:public
min_size	workload_generator.h	/^    unsigned long min_size;$/;"	m	struct:_wg_env	access:public
nonsequential_w	workload_generator.h	/^    unsigned int nonsequential_w;$/;"	m	struct:_wg_env	access:public
pose_time	workload_generator.h	/^    unsigned int pose_time; \/\/ms$/;"	m	struct:_wg_env	access:public
print_log	WLGenerator.h	10;"	d
print_log	WLGenerator.h	13;"	d
rand_deterministic	workload_generator.h	/^    unsigned int rand_deterministic;$/;"	m	struct:_wg_env	access:public
read_w	workload_generator.h	/^    unsigned int read_w;$/;"	m	struct:_wg_env	access:public
select_op	workload_generator.c	/^int select_op(void)$/;"	f	signature:(void)
select_op	workload_generator.c	/^int select_op(void);$/;"	p	file:	signature:(void)
select_size	workload_generator.c	/^unsigned long select_size(unsigned long start_addr)$/;"	f	signature:(unsigned long start_addr)
select_size	workload_generator.c	/^unsigned long select_size(unsigned long start_addr);$/;"	p	file:	signature:(unsigned long start_addr)
select_start_addr	workload_generator.c	/^unsigned long select_start_addr(unsigned long prior_end_addr)$/;"	f	signature:(unsigned long prior_end_addr)
select_start_addr	workload_generator.c	/^unsigned long select_start_addr(unsigned long prior_end_addr);$/;"	p	file:	signature:(unsigned long prior_end_addr)
sequential_w	workload_generator.h	/^    unsigned int sequential_w;$/;"	m	struct:_wg_env	access:public
test_interface_type	workload_generator.h	/^    unsigned int test_interface_type;$/;"	m	struct:_wg_env	access:public
test_length_type	workload_generator.h	/^    unsigned int test_length_type;$/;"	m	struct:_wg_env	access:public
total_test_req	workload_generator.h	/^    unsigned long total_test_req;$/;"	m	struct:_wg_env	access:public
total_test_time	workload_generator.h	/^    unsigned int total_test_time;$/;"	m	struct:_wg_env	access:public
utime_calculator	WLGenerator.c	/^static uint64_t utime_calculator(struct timeval *s, struct timeval *e){$/;"	f	file:	signature:(struct timeval *s, struct timeval *e)
wg_env	workload_generator.c	/^static PWG_ENV wg_env;$/;"	v	file:
wg_param_num	workload_generator.c	/^static char wg_param_num[NUM_WG_PARAMETER_NUM][255] = { $/;"	v	file:
wg_param_num_cmd	workload_generator.c	/^static void (*wg_param_num_cmd[NUM_WG_PARAMETER_NUM])(unsigned long) = { $/;"	v	file:
wg_param_str	workload_generator.c	/^static char wg_param_str[NUM_WG_PARAMETER_STR][255] = { $/;"	v	file:
wg_param_str_cmd	workload_generator.c	/^static void (*wg_param_str_cmd[NUM_WG_PARAMETER_STR])(char *) = { $/;"	v	file:
workload_generator	workload_generator.c	/^void workload_generator(void)$/;"	f	signature:(void)
workload_generator	workload_generator.c	/^void workload_generator(void);$/;"	p	file:	signature:(void)
write_w	workload_generator.h	/^    unsigned int write_w;$/;"	m	struct:_wg_env	access:public
